{"version":3,"sources":["Context.js","components/Contacts/Contact.js","components/Contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/Contacts/AddContacts.js","components/Contacts/EditContacts.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","console","log","Provider","name","email","phone","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showInfo","showArrow","onClickDown","e","onDeleteClick","a","delete","className","onClick","aria-hidden","style","cursor","color","float","bind","to","Contacts","onDeleteContact","Fragment","key","deleteFunction","Header","branding","href","defaultProps","TextInputGroup","label","onChange","placeholder","error","htmlFor","classnames","AddContacts","target","onSubmit","preventDefault","newcontact","post","history","push","EditContacts","match","params","updateContact","put","About","NotFound","Test","title","body","fetch","then","response","json","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c875df4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    // eslint-disable-next-line default-case\r\n    switch (action.type)\r\n    {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts:[action.payload,...state.contacts]\r\n            }\r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact=>contact.id===action.payload.id ? (contact=action.payload) : contact)\r\n            }\r\n        default:\r\n            console.log(action.type + \" Default is running \" + action.payload)\r\n            return state;\r\n    }\r\n}\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [\r\n        {\r\n            id: \"1\",\r\n            name: \"Rishab Mangal\",\r\n            email: \"rishabhmangal1@gmail.com\",\r\n            phone: \"9928799243\"\r\n        },\r\n        {\r\n            id: \"2\",\r\n            name: \"Aman Mangal\",\r\n            email: \"amanmangal2@gmail.com\",\r\n            phone: \"99264698456\"\r\n        },\r\n        {\r\n            id: \"3\",\r\n            name: \"Akash Mangal\",\r\n            email: \"Akashmangal3@gmail.com\",\r\n            phone: \"9651659823\"\r\n        },\r\n        ],\r\n        dispatch: action => {\r\n            this.setState(state => reducer(state, action))\r\n        }\r\n    };\r\n    async componentDidMount() {\r\n        // axios.get(\"https://jsonplaceholder.typicode.com/users\").then(res => this.setState({ ...this.state,contacts:[res.data,...this.state.contacts] }));\r\n        const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\r\n        this.setState({contacts:res.data})\r\n    }\r\n    // componentDidMount() {\r\n    //     // axios.get(\"https://jsonplaceholder.typicode.com/users\").then(res => this.setState({ ...this.state,contacts:[res.data,...this.state.contacts] }));\r\n    //     axios.get(\"https://jsonplaceholder.typicode.com/users\").then(res => this.setState({ contacts:res.data }));\r\n    // }\r\n    // UNSAFE_componentDidUpdate() {\r\n    //      console.log(\"Component did Upadate\");\r\n    // }\r\n    \r\n    //  UNSAFE_componentWillUpdate() {\r\n    //      console.log(\"Component Will Upadate\");\r\n    // }\r\n    // UNSAFE_componentWillReceiveProps()\r\n    // {\r\n    //     console.log(\"Hello\")\r\n    // }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../Context'\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n// import './Contact.css'\r\nclass Contact extends Component {\r\n    static propTypes = {\r\n        contact: PropTypes.object.isRequired,\r\n        // deleteFunction:PropTypes.func.isRequired\r\n        // deleteContact:PropTypes.func.isRequired\r\n\r\n        // name: PropTypes.string.isRequired,\r\n        // email: PropTypes.string.isRequired,\r\n        // phone: PropTypes.string.isRequired\r\n    };\r\n    state = {\r\n        showInfo: false,\r\n        showArrow: true\r\n    }\r\n    // onClickDown() {\r\n    //     console.log(this.state);   Binding Will Be Reqiured For This Type of function \r\n    // }                              But For Arrow Function no binding required\r\n    onClickDown = (e) => {\r\n        // this.state = {\r\n        //     showInfo:false    WRONG BECAUSE STATE IS UNMUTABLE\r\n        // }\r\n        // this.setState({showInfo:false})   INSTEAD OF MAKING IT PERMANENT MAKE IT TOGGLE\r\n        this.setState({showInfo:!(this.state.showInfo), showArrow:!(this.state.showArrow)})\r\n    }\r\n    onDeleteClick = async (id, dispatch) => {\r\n        // this.props.deleteContact();\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        dispatch({\r\n            type: 'DELETE_CONTACT',\r\n            payload: id\r\n        });\r\n\r\n    // onDeleteClick = (id, dispatch) => {\r\n    //     // this.props.deleteContact();\r\n    //     axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n    //     .then(res=> { dispatch({\r\n    //         type: 'DELETE_CONTACT',\r\n    //         payload: id\r\n    //     })})\r\n\r\n\r\n\r\n\r\n        console.log(\"You Deleted me \"+id);\r\n        // dispatch({\r\n        //     type: 'DELETE_CONTACT',\r\n        //     payload: id\r\n        // });\r\n        // this.props.deleteFunction();\r\n    };\r\n    // onClickDown = (name,e) => {\r\n    //     console.log(name);\r\n    // }\r\n    render() {\r\n        const { id,name, email, phone } = this.props.contact;\r\n        const { showInfo } = this.state;\r\n        // const { contact } = this.props;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return (\r\n                        < div className=\"card card-body-mb-4 p-3\" >\r\n                            {/* <h5>{this.props.name}</h5> */}\r\n                            {/* <h4>{name}<i onClick={this.onClickDown.bind(this)} className=\"fas fa-sort-down\" aria-hidden=\"true\"></i></h4> */}\r\n                            {/* <h4>{name}<i onClick={this.onClickDown.bind(this,name)} className=\"fas fa-sort-down\" aria-hidden=\"true\"></i></h4> */}\r\n                            <h4>{name}{' '}{this.state.showArrow ? (<i onClick={this.onClickDown} className=\"fas fa-sort-down px-2\" aria-hidden=\"true\" style={{ cursor: \"pointer\" }}></i>) : (<i onClick={this.onClickDown} className=\"fas fa-sort-up\" aria-hidden=\"true\" style={{ cursor: \"pointer\", color: \"red\" }}></i>)}\r\n                                <i className=\"fas fa-times\" aria-hidden=\"true\" style={{ color: \"red\", float: \"right\", cursor: \"pointer\" }} onClick={this.onDeleteClick.bind(this, id, dispatch)}></i>\r\n                               <Link to={`edit/${id}`} ><i className=\"fas fa-pencil-alt px-3\" style={{float:\"right\"}}></i></Link>\r\n\r\n                            </h4>\r\n                            {/* <h4>{contact.name}</h4> */}\r\n                            {showInfo ? (<ul className=\"list-group\">\r\n                                {/* <li>Email: {this.props.email}</li> */}\r\n                                <li className=\"list-group-item\">Email: {email}</li>\r\n                                {/* <li className=\"list-group-item\">Email: {contact.email}</li> */}\r\n                                {/* <li>Phone no: {this.props.phone}</li> */}\r\n                                <li className=\"list-group-item\">Phone no: {phone}</li>\r\n                                {/* <li className=\"list-group-item\">Phone no: {contact.phone}</li> */}\r\n                            </ul>) :null} \r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n            // < div className = \"card card-body-mb-3\" >\r\n            //     {/* <h5>{this.props.name}</h5> */}\r\n            //     {/* <h4>{name}<i onClick={this.onClickDown.bind(this)} className=\"fas fa-sort-down\" aria-hidden=\"true\"></i></h4> */}\r\n            //     {/* <h4>{name}<i onClick={this.onClickDown.bind(this,name)} className=\"fas fa-sort-down\" aria-hidden=\"true\"></i></h4> */}\r\n            //     <h4>{name}{' '}{this.state.showArrow ?(<i onClick={this.onClickDown} className=\"fas fa-sort-down\" aria-hidden=\"true\" style={{ cursor: \"pointer\" }}></i>):(<i onClick={this.onClickDown} className=\"fas fa-sort-up\" aria-hidden=\"true\" style={{ cursor: \"pointer\" ,color:\"red\"}}></i>)}\r\n            //         <i className=\"fas fa-times\" aria-hidden=\"true\" style={{color:\"red\",float:\"right\",cursor:\"pointer\"}} onClick={this.onDeleteClick}></i>\r\n            //     </h4>\r\n            //     {/* <h4>{contact.name}</h4> */}\r\n            //     {showInfo ? (<ul className=\"list-group\">\r\n            //             {/* <li>Email: {this.props.email}</li> */}\r\n            //             <li className=\"list-group-item\">Email: {email}</li>\r\n            //             {/* <li className=\"list-group-item\">Email: {contact.email}</li> */}\r\n            //             {/* <li>Phone no: {this.props.phone}</li> */}\r\n            //             <li className=\"list-group-item\">Phone no: {phone}</li>\r\n            //             {/* <li className=\"list-group-item\">Phone no: {contact.phone}</li> */}\r\n            //         </ul>) : null }\r\n                    \r\n            // </div>\r\n        )\r\n    }\r\n}\r\n// Contact.propTypes = {\r\n//     name: PropTypes.string.isRequired,\r\n//     email: PropTypes.string.isRequired,\r\n//     phone: PropTypes.string.isRequired\r\n// };\r\nexport default Contact;\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer } from '../../Context';\r\n// import AddContacts from './AddContacts'\r\n// import {consumer} from '../Context'\r\nclass Contacts extends Component {\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         contacts:[\r\n    //             {\r\n    //                 id: \"1\",\r\n    //                 name: \"Rishab Mangal\",\r\n    //                 email: \"rishabhmangal1@gmail.com\",\r\n    //                 phone:\"9928799243\"\r\n    //             },\r\n    //             {\r\n    //                 id: \"2\",\r\n    //                 name: \"Aman Mangal\",\r\n    //                 email: \"amanmangal2@gmail.com\",\r\n    //                 phone:\"99264698456\"\r\n    //             },\r\n    //             {\r\n    //                 id: \"3\",\r\n    //                 name: \"Akash Mangal\",\r\n    //                 email: \"Akashmangal3@gmail.com\",\r\n    //                 phone:\"9651659823\"\r\n    //             },\r\n    //         ]\r\n    //     }\r\n    // }\r\n    // state = {\r\n    //     contacts: [{\r\n    //             id: \"1\",\r\n    //             name: \"Rishab Mangal\",\r\n    //             email: \"rishabhmangal1@gmail.com\",\r\n    //             phone: \"9928799243\"\r\n    //         },\r\n    //         {\r\n    //             id: \"2\",\r\n    //             name: \"Aman Mangal\",\r\n    //             email: \"amanmangal2@gmail.com\",         \r\n    //             phone: \"99264698456\"\r\n    //         },\r\n    //         {\r\n    //             id: \"3\",\r\n    //             name: \"Akash Mangal\",\r\n    //             email: \"Akashmangal3@gmail.com\",\r\n    //             phone: \"9651659823\"\r\n    //         },\r\n    //         {\r\n    //             id: \"4\",\r\n    //             name: \"Aman Bhagel\",\r\n    //             email: \"amanmangal2@gmail.com\",         \r\n    //             phone: \"99264698456\"\r\n    //         },\r\n    //         {\r\n    //             id: \"5\",\r\n    //             name: \"Akash Mangal\",\r\n    //             email: \"Akashmangal3@gmail.com\",\r\n    //             phone: \"9651659823\"\r\n    //         },\r\n    //     ]\r\n    // }\r\n    // deleteContact = (id) => {\r\n    //     // console.log(id + \" Oh My God!!.You Deleted Me\")   \r\n        \r\n    //     const { contacts } = this.state\r\n        \r\n    //     const newContact = contacts.filter(contact => contact.id !== id);\r\n\r\n    //     this.setState({\r\n    //         contacts: newContact\r\n    //     });\r\n    // }\r\n    // this.setState({ [this.state]: AddContacts.state });\r\n    //     funnew = () => {\r\n    //         console.log(\"New console AddContacts.state.name\");\r\n\r\n    // }\r\n    constructor() {\r\n        super();\r\n        console.log(\"Constructor of Contats\");\r\n    }\r\n    onDeleteContact = (id) => {\r\n        console.log(\"Yipeee \" + id);\r\n        // const { contacts } = this.state;    \r\n        // const tempContacts = contacts.filter(contact => contact.id !== id);\r\n        // this.setState({\r\n        //     contacts: tempContacts\r\n        // })\r\n    }\r\n    render() {\r\n        // return (\r\n        //     <consumer>\r\n        //         {value => {\r\n        //             const { contacts } = value;\r\n        //             return (\r\n        //                 <React.Fragment>\r\n        //                     {contacts.map(contact =>\r\n        //                         // <h1>{contact.name}</h1>\r\n        //                         <Contact\r\n        //                             key={contact.id}\r\n        //                             // name={contact.name}\r\n        //                             // email={contact.email}\r\n        //                             // phone={contact.phone}\r\n        //                             contact={contact}\r\n        //                             // deleteContact={this.deleteContact.bind(this, contact.id)}\r\n        //                         />\r\n        //                     )}\r\n        //                 </React.Fragment>\r\n        //             )\r\n        //         }}\r\n        //     </consumer>\r\n        // );\r\n        return (\r\n            <Consumer>\r\n                {\r\n                    value => {\r\n                        const { contacts } = value;\r\n                        return (\r\n                            //  <div>\r\n                            <React.Fragment>\r\n                                <h1 className=\"display-4 mb-2\"><span className=\"text-danger\">Contact</span> List</h1>\r\n                                {contacts.map(contact =>\r\n                                // <h1>{contact.name}</h1>\r\n                                    <Contact\r\n                                        key={contact.id}\r\n                                        // name={contact.name}\r\n                                        // email={contact.email}\r\n                                        // phone={contact.phone}\r\n                                        contact={contact}\r\n                                        deleteFunction={this.onDeleteContact.bind(this,contact.id)}\r\n                                    />    \r\n                                 )}\r\n                                {/* <button onClick={this.funnew}> New</button> */}\r\n                            </React.Fragment>\r\n                            // </div>\r\n                        )\r\n                    }\r\n                }\r\n            </Consumer>\r\n        )\r\n\r\n\r\n\r\n        // const { contacts } = this.state;\r\n        // return (\r\n        //     <div>\r\n        //         {contacts.map(contact =>\r\n        //         // <h1>{contact.name}</h1>\r\n        //             <Contact\r\n        //                 key={contact.id}\r\n        //                 // name={contact.name}\r\n        //                 // email={contact.email}\r\n        //                 // phone={contact.phone}\r\n        //                 contact={contact}\r\n        //                 deleteFunction={this.onDeleteContact.bind(this,contact.id)}\r\n        //             />    \r\n        //         )}\r\n        //         <button onClick={this.funnew}> New</button>\r\n        //     </div>\r\n        //     <React.Fragment>\r\n        //         {contacts.map(contact =>\r\n        //         // <h1>{contact.name}</h1>\r\n        //             <Contact\r\n        //                 key={contact.id}\r\n        //                 // name={contact.name}\r\n        //                 // email={contact.email}                     PASTED IN RETURN OF VALUE\r\n        //                 // phone={contact.phone}\r\n        //                 contact={contact}\r\n        //                 deleteContact={this.deleteContact.bind(this,contact.id)}\r\n        //             />    \r\n        //             )}\r\n        //     </React.Fragment>\r\n        // )\r\n    }\r\n} \r\nexport default Contacts;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nconst Header = (props) => {\r\n    const { branding } = props;\r\n    return (\r\n        <div>\r\n            {/* <h2>{props.branding }</h2> */}\r\n            {/* <h1 style={{color:\"red\",fontSize:\"50px\"}}>{branding }</h1> */}\r\n            {/* <h1>{branding }</h1> */}\r\n            < nav className = \"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\" >\r\n               .<div className=\"container\">\r\n                <a className=\"navbar-brand\" href=\"/\">{branding}</a>\r\n                </div> \r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"></i>\r\n                            Home\r\n                            </Link>\r\n                            </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/x\" className=\"nav-link\">\r\n                                < i className = \"fas fa-plus\" > </i>\r\n                            Add Contacts\r\n                            </Link>\r\n                            </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about/1\" className=\"nav-link\">\r\n                                < i className = \"fas fa-question\" > </i>\r\n                            About us\r\n                            </Link>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n        </div>\r\n    );\r\n   \r\n}\r\n Header.defaultProps = {\r\n     branding: \"My App\"\r\n}\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n }\r\nexport default Header;  \r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames';\r\nconst TextInputGroup = ({\r\n    label,\r\n    name,\r\n    value,\r\n    type,\r\n    onChange,\r\n    placeholder,\r\n    error\r\n}) => {\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor={name}>{label}</label>\r\n                <input type={type}\r\n                    name={name}\r\n                    placeholder={placeholder}\r\n                    className={classnames(\"form-control form-control-lg\",{\"is-invalid\":error})}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                ></input>\r\n                {error && <div className=\"invalid-feedback\">{error}</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n\r\n}\r\nTextInputGroup.defaultProps = {\r\n    type:\"text\"\r\n}\r\n\r\nexport default TextInputGroup;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../Context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n// import uuid from 'uuid';\r\nimport axios from 'axios';\r\n// import Contacts from './Contacts';\r\nclass AddContacts extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        error:{}\r\n    }\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n    onSubmit = async (dispatch,e) => {\r\n        e.preventDefault();\r\n        const { name, email, phone } = this.state\r\n\r\n        if (name === \"\")\r\n        {\r\n            this.setState({ error: { name: \"Ohh So Sorry You Don't have a Name\" } });\r\n            return;\r\n        }\r\n        if (email === \"\")\r\n        {\r\n            this.setState({ error: { email: \"Go Get an Email First\" } });\r\n            return;\r\n        }\r\n        if (phone === \"\")\r\n        {\r\n            this.setState({ error: { phone: \"Com'on have a phone atleast\" } });\r\n            return;\r\n        }\r\n\r\n        const newcontact = {\r\n            // id:uuid(),\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n        const res=await axios.post(`https://jsonplaceholder.typicode.com/users`, newcontact)\r\n        dispatch({\r\n            type: \"ADD_CONTACT\",\r\n            payload: res.data\r\n        })\r\n\r\n        \r\n        console.log(\"State is \"+this.state)\r\n        console.log(\"newContact is \")\r\n        console.log(newcontact)\r\n        this.setState({\r\n            name: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            error: {}\r\n        });\r\n        this.props.history.push(\"/\");\r\n\r\n    }\r\n    // onSubmit = (dispatch,e) => {\r\n    //     e.preventDefault();\r\n    //     const { name, email, phone } = this.state\r\n\r\n    //     if (name === \"\")\r\n    //     {\r\n    //         this.setState({ error: { name: \"Ohh So Sorry You Don't have a Name\" } });\r\n    //         return;\r\n    //     }\r\n    //     if (email === \"\")\r\n    //     {\r\n    //         this.setState({ error: { email: \"Go Get an Email First\" } });\r\n    //         return;\r\n    //     }\r\n    //     if (phone === \"\")\r\n    //     {\r\n    //         this.setState({ error: { phone: \"Com'on have a phone atleast\" } });\r\n    //         return;\r\n    //     }\r\n\r\n    //     const newcontact = {\r\n    //         // id:uuid(),\r\n    //         name,\r\n    //         email,\r\n    //         phone\r\n    //     }\r\n    //     axios.post(`https://jsonplaceholder.typicode.com/users`, newcontact)\r\n    //     .then(res=>dispatch({type:\"ADD_CONTACT\",payload:res.data}))\r\n\r\n        \r\n    //     console.log(\"State is \"+this.state)\r\n    //     console.log(\"newContact is \")\r\n    //     console.log(newcontact)\r\n    //     this.setState({\r\n    //         name: \"\",\r\n    //         phone: \"\",\r\n    //         email: \"\",\r\n    //         error: {}\r\n    //     });\r\n    //     this.props.history.push(\"/\");\r\n\r\n    // }\r\n    render() {\r\n        const { name,email,phone,error} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value\r\n                    return (\r\n                         <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Add Contact</div>\r\n                <div className=\"card-body\">\r\n                        <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        name=\"name\"\r\n                                        label=\"Name\"\r\n                                        placeholder=\"Enter Name..\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        type=\"text\"\r\n                                        error={error.name}\r\n                                    ></TextInputGroup>            \r\n                                    <TextInputGroup\r\n                                        name=\"email\"\r\n                                        label=\"Email\"\r\n                                        placeholder=\"Enter Email..\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        type=\"email\"\r\n                                        error={error.email}\r\n                                    ></TextInputGroup>            \r\n                                    <TextInputGroup\r\n                                        name=\"phone\"\r\n                                        label=\"Phone\"\r\n                                        placeholder=\"Enter Phone..\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        type=\"text\"\r\n                                        error={error.phone}\r\n                                    ></TextInputGroup>            \r\n                        {/* <div className=\"form-group\">\r\n                            <label htmlFor=\"name\">Name</label>\r\n                            <input type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter Name...\"\r\n                                className=\"form-control form-control-lg\"\r\n                                value={this.state.name}\r\n                                onChange={this.onChange}\r\n                            ></input>\r\n                        </div> */}\r\n                        {/* <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <input type=\"email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Enter Email...\"\r\n                                className=\"form-control form-control-lg\"\r\n                                value={this.state.email}\r\n                                onChange={this.onChange} \r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"phone\">Phone</label>\r\n                            <input type=\"phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter Phone...\"\r\n                                className=\"form-control form-control-lg\"\r\n                                value={this.state.phone}\r\n                                onChange={this.onChange}\r\n                            ></input>\r\n                        </div> */}\r\n                        <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-block btn-primary\" ></input>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n        // return (\r\n        //     <div className=\"card mb-3\">\r\n        //         <div className=\"card-header\">Add Contact</div>\r\n        //         <div className=\"card-body\">\r\n        //             <form onSubmit={this.onSubmit}>\r\n        //                 <div className=\"form-group\">\r\n        //                     <label htmlFor=\"name\">Name</label>\r\n        //                     <input type=\"text\"\r\n        //                         name=\"name\"\r\n        //                         placeholder=\"Enter Name...\"\r\n        //                         className=\"form-control form-control-lg\"\r\n        //                         value={this.state.name}\r\n        //                         onChange={this.onChange}\r\n        //                     ></input>\r\n        //                 </div>\r\n        //                 <div className=\"form-group\">\r\n        //                     <label htmlFor=\"email\">Email</label>\r\n        //                     <input type=\"email\"\r\n        //                         name=\"email\"\r\n        //                         placeholder=\"Enter Email...\"\r\n        //                         className=\"form-control form-control-lg\"\r\n        //                         value={this.state.email}\r\n        //                         onChange={this.onChange} \r\n        //                     ></input>\r\n        //                 </div>\r\n        //                 <div className=\"form-group\">\r\n        //                     <label htmlFor=\"phone\">Phone</label>\r\n        //                     <input type=\"phone\"\r\n        //                         name=\"phone\"\r\n        //                         placeholder=\"Enter Phone...\"\r\n        //                         className=\"form-control form-control-lg\"\r\n        //                         value={this.state.phone}\r\n        //                         onChange={this.onChange}\r\n        //                     ></input>\r\n        //                 </div>\r\n        //                 <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-block btn-primary\" ></input>\r\n        //             </form>\r\n        //         </div>\r\n        //     </div>\r\n        // )\r\n    }\r\n}\r\n\r\nexport default AddContacts;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../Context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\n// import uuid from 'uuid';\r\nimport axios from 'axios';\r\n// import Contacts from './Contacts';\r\nclass EditContacts extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        error:{}\r\n    }\r\n    async componentDidMount()\r\n    {\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        const contact = res.data;\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone:contact.phone\r\n        })\r\n    }\r\n    onChange = e => this.setState({ [e.target.name]: e.target.value });\r\n    onSubmit = async (dispatch,e) => {\r\n        e.preventDefault();\r\n        const { name, email, phone } = this.state\r\n        const {id}=this.props.match.params\r\n\r\n        if (name === \"\")\r\n        {\r\n            this.setState({ error: { name: \"Ohh So Sorry You Don't have a Name\" } });\r\n            return;\r\n        }\r\n        if (email === \"\")\r\n        {\r\n            this.setState({ error: { email: \"Go Get an Email First\" } });\r\n            return;\r\n        }\r\n        if (phone === \"\")\r\n        {\r\n            this.setState({ error: { phone: \"Com'on have a phone atleast\" } });\r\n            return;\r\n        }\r\n        const updateContact = {\r\n            name,\r\n            phone,\r\n            email\r\n        }\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\r\n        dispatch({type:\"UPDATE_CONTACT\",payload:res.data})\r\n\r\n\r\n        console.log(\"State is \" + this.state)\r\n        console.log(\"newContact is \")\r\n        this.setState({\r\n            name: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            error: {}\r\n        });\r\n        this.props.history.push(\"/\");\r\n\r\n    }\r\n    // onSubmit = (dispatch,e) => {\r\n    //     e.preventDefault();\r\n    //     const { name, email, phone } = this.state\r\n\r\n    //     if (name === \"\")\r\n    //     {\r\n    //         this.setState({ error: { name: \"Ohh So Sorry You Don't have a Name\" } });\r\n    //         return;\r\n    //     }\r\n    //     if (email === \"\")\r\n    //     {\r\n    //         this.setState({ error: { email: \"Go Get an Email First\" } });\r\n    //         return;\r\n    //     }\r\n    //     if (phone === \"\")\r\n    //     {\r\n    //         this.setState({ error: { phone: \"Com'on have a phone atleast\" } });\r\n    //         return;\r\n    //     }\r\n\r\n    //     const newcontact = {\r\n    //         // id:uuid(),\r\n    //         name,\r\n    //         email,\r\n    //         phone\r\n    //     }\r\n    //     axios.post(`https://jsonplaceholder.typicode.com/users`, newcontact)\r\n    //     .then(res=>dispatch({type:\"ADD_CONTACT\",payload:res.data}))\r\n\r\n        \r\n    //     console.log(\"State is \"+this.state)\r\n    //     console.log(\"newContact is \")\r\n    //     console.log(newcontact)\r\n    //     this.setState({\r\n    //         name: \"\",\r\n    //         phone: \"\",\r\n    //         email: \"\",\r\n    //         error: {}\r\n    //     });\r\n    //     this.props.history.push(\"/\");\r\n\r\n    // }\r\n    render() {\r\n        const { name,email,phone,error} = this.state;\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value\r\n                    return (\r\n                         <div className=\"card mb-3\">\r\n                <div className=\"card-header\">Edit Contact</div>\r\n                <div className=\"card-body\">\r\n                        <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        name=\"name\"\r\n                                        label=\"Name\"\r\n                                        placeholder=\"Enter Name..\"\r\n                                        value={name}\r\n                                        onChange={this.onChange}\r\n                                        type=\"text\"\r\n                                        error={error.name}\r\n                                    ></TextInputGroup>            \r\n                                    <TextInputGroup\r\n                                        name=\"email\"\r\n                                        label=\"Email\"\r\n                                        placeholder=\"Enter Email..\"\r\n                                        value={email}\r\n                                        onChange={this.onChange}\r\n                                        type=\"email\"\r\n                                        error={error.email}\r\n                                    ></TextInputGroup>            \r\n                                    <TextInputGroup\r\n                                        name=\"phone\"\r\n                                        label=\"Phone\"\r\n                                        placeholder=\"Enter Phone..\"\r\n                                        value={phone}\r\n                                        onChange={this.onChange}\r\n                                        type=\"text\"\r\n                                        error={error.phone}\r\n                                    ></TextInputGroup>            \r\n                        {/* <div className=\"form-group\">\r\n                            <label htmlFor=\"name\">Name</label>\r\n                            <input type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter Name...\"\r\n                                className=\"form-control form-control-lg\"\r\n                                value={this.state.name}\r\n                                onChange={this.onChange}\r\n                            ></input>\r\n                        </div> */}\r\n                        {/* <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <input type=\"email\"\r\n                                name=\"email\"\r\n                                placeholder=\"Enter Email...\"\r\n                                className=\"form-control form-control-lg\"\r\n                                value={this.state.email}\r\n                                onChange={this.onChange} \r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"phone\">Phone</label>\r\n                            <input type=\"phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter Phone...\"\r\n                                className=\"form-control form-control-lg\"\r\n                                value={this.state.phone}\r\n                                onChange={this.onChange}\r\n                            ></input>\r\n                        </div> */}\r\n                        <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-block btn-primary\" ></input>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n        // return (\r\n        //     <div className=\"card mb-3\">\r\n        //         <div className=\"card-header\">Add Contact</div>\r\n        //         <div className=\"card-body\">\r\n        //             <form onSubmit={this.onSubmit}>\r\n        //                 <div className=\"form-group\">\r\n        //                     <label htmlFor=\"name\">Name</label>\r\n        //                     <input type=\"text\"\r\n        //                         name=\"name\"\r\n        //                         placeholder=\"Enter Name...\"\r\n        //                         className=\"form-control form-control-lg\"\r\n        //                         value={this.state.name}\r\n        //                         onChange={this.onChange}\r\n        //                     ></input>\r\n        //                 </div>\r\n        //                 <div className=\"form-group\">\r\n        //                     <label htmlFor=\"email\">Email</label>\r\n        //                     <input type=\"email\"\r\n        //                         name=\"email\"\r\n        //                         placeholder=\"Enter Email...\"\r\n        //                         className=\"form-control form-control-lg\"\r\n        //                         value={this.state.email}\r\n        //                         onChange={this.onChange} \r\n        //                     ></input>\r\n        //                 </div>\r\n        //                 <div className=\"form-group\">\r\n        //                     <label htmlFor=\"phone\">Phone</label>\r\n        //                     <input type=\"phone\"\r\n        //                         name=\"phone\"\r\n        //                         placeholder=\"Enter Phone...\"\r\n        //                         className=\"form-control form-control-lg\"\r\n        //                         value={this.state.phone}\r\n        //                         onChange={this.onChange}\r\n        //                     ></input>\r\n        //                 </div>\r\n        //                 <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-block btn-primary\" ></input>\r\n        //             </form>\r\n        //         </div>\r\n        //     </div>\r\n        // )\r\n    }\r\n}\r\n\r\nexport default EditContacts;","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple App to Manage Contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n            <h2>Developed by</h2>\r\n            <p className=\"lead\">Rishab Mangal</p>\r\n            <p className=\"text-secondary\">Path- {props.match.params.id}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not found</h1>\r\n            <p className=\"lead\">Sorry, Requested Page Doesn't Exist</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n    state = {\r\n        title: \"\",\r\n        body:\"\"\r\n    }\r\n    componentDidMount()\r\n    {\r\n        console.log(\"Component did mount\");\r\n         fetch('https://jsonplaceholder.typicode.com/todos/1')\r\n             .then(response => response.json())\r\n             .then(data => this.setState({\r\n                 title: data.title,\r\n                 body: data.body\r\n             }))\r\n    }\r\n    UNSAFE_componentWillMount()\r\n    {\r\n        console.log(\"Component Will mount\");\r\n    }\r\n    componentDidUpdate() {\r\n        console.log(\"Component did Upadate\");\r\n    }\r\n    render() {\r\n        const {title,body}=this.state\r\n        return (\r\n            <div>\r\n                <h1 className=\"display-4\">Test Component</h1>                \r\n                <h1 className=\"display-4\">{title}</h1>\r\n                <p className=\"lead\">{body}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Test;\r\n","import React, { Component } from 'react';\n// import Contact from './components/Contact'\nimport {HashRouter as Router,Route,Switch} from 'react-router-dom'\nimport Contacts from './components/Contacts/Contacts'\nimport Header from './components/layout/Header'\nimport AddContacts from './components/Contacts/AddContacts'\nimport EditContacts from './components/Contacts/EditContacts'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Provider } from './Context'\nimport About from './components/pages/About'\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   const name = \"Rishab Mangal\";\n//   let showname = true;\n//   let showid = true;\n//   let math;\n//   if (showid == true)\n//   {\n//     math=<h2>ID is 2018KUCP1131</h2>  \n//   }\n//   else {\n//     math = null;\n//   }\n//   return (\n//     <div className=\"App\">\n//       <h1>\n//         Hello World!\n//       </h1>\n//       {showname ? <h1>This is {name}</h1> : null}\n//       {math}\n//     </div>\n//   );\n// }\n\n\nclass App extends Component\n{\n  render() {\n    return (\n      <Provider>\n        <Router>\n        <div className=\"App\">\n          <Header branding=\"Contact manager\" />\n            <div className=\"container\">\n              {/* <Contact name=\"Rishabh Mangal\"\n                email=\"Rishabhmangal1@gmail.com\"\n                phone=\"9928799243\" />\n              <Contact name=\"Priti Mangal\"\n                email=\"Pritimangal1@gmail.com\"\n                phone=\"8952080039\" /> */}\n              <Switch>\n                <Route exact path=\"/\" component={Contacts}></Route>\n                <Route exact path=\"/x\" component={AddContacts}></Route>\n                <Route exact path=\"/edit/:id\" component={EditContacts}></Route>\n                <Route exact path=\"/about/:id\" component={About}></Route>\n                <Route exact path=\"/test\" component={Test}></Route>\n                <Route component={NotFound}></Route>\n              </Switch>\n            </div>\n          </div>\n          </Router>\n     </Provider>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}